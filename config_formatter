from __future__ import annotations

import re
import typing

if typing.TYPE_CHECKING:
    from typing import Callable

# regex for a type
REGEX_TYPE = r"(?!return|goto)([a-z]+\s+)*[a-zA-Z_]\w*"
# regex for a c variable/function name
REGEX_NAME = r"\**[a-zA-Z_*()]\w*"
# regex for a name in a declaration context (with array and function ptr)
REGEX_DECL_NAME = r"\(?{name}(\[.*\])*(\s\=\s.*)?(\)\(.*\))?".format(name=REGEX_NAME)
# set to true for C++ style (same line), False for C style (new line)
CPP_BRACE_STYLE = True

def locally_scoped(func: Callable[[str], str]) -> Callable[[str], str]:
    """Apply the formatter on every local scopes of the content"""

    def wrapper(content: str) -> str:
        def replacement_func(match: re.Match) -> str:
            result = func(match.group("body").strip("\n"))
            # Edge case for functions with empty bodies (See PR#31)
            if result.strip() == "":
                if CPP_BRACE_STYLE:
                    return ") {\n}\n"
                else:
                    return ")\n{\n}\n"
            if CPP_BRACE_STYLE:
                return ") {\n" + result + "\n}\n"
            else:
                return ")\n{\n" + result + "\n}\n"

        if CPP_BRACE_STYLE:
            pattern = r"\)\s*\{(?P<body>.*?)\n\}\n"
        else:
            pattern = r"\)\n\{(?P<body>.*?)\n\}\n"
        
        return re.sub(
            pattern.replace(r"\n", "\n"),
            replacement_func,
            content,
            flags=re.DOTALL,
        )

    return wrapper
